//  picoMIPS program 
// n = 8 bits, Isize = 8+n = 16 bits
// format: 3b opcode, 3b %d, 3b %s, 8b immediate or address

// HEX /// BINARY /////////////// ASSEMBLER //////////////////////// COMMENT       
         
8800    // 100_010_00_00000000    BEQ  %2, %0,  0                 // 0 wait_for_sw8: loop until SW8 == 1
4400    // 010_001_00_00000000    MULI %1, %0,  0                 // 1 R1 <- 0 (clear index)
2500    // 001_001_01_00000000    ADD  %1, %1                     // 2 R1 <- R1 + SW  (load index)
5000    // 010_100_00_00000000    MULI %4, %0,  0                 // 3 R4 <- 0 (clear accumulator)

ADFE    // 101_011_01_11111110    LWD  %3, %1, -2                 // 4 R3 <- W[i-2]
ADFE    // 101_011_01_11111110    LWD  %3, %1, -2                 // 4 R3 <- W[i-2]
4F11    // 010_011_11_00010001    MULI %3, %3, 17                 // 5 R3 *= 17
3300    // 001_100_11_00000000    ADD  %4, %3                     // 6 R4 += R3


ADFF    // 101_011_01_11111111    LWD  %3, %1, -1                 // 7 R3 <- W[i-1]
ADFF    // 101_011_01_11111111    LWD  %3, %1, -1                 // 7 R3 <- W[i-1]
4F1D    // 010_011_11_00011101    MULI %3, %3, 29                 // 8 R3 *= 29
3300    // 001_100_11_00000000    ADD  %4, %3                     // 9 R4 += R3

AD00    // 101_011_01_00000000    LWD  %3, %1,  0                // 10 R3 <- W[i]
AD00    // 101_011_01_00000000    LWD  %3, %1,  0                // 10 R3 <- W[i]
4F23    // 010_011_11_00100011    MULI %3, %3, 35                // 11 R3 *= 35
3300    // 001_100_11_00000000    ADD  %4, %3                    // 12 R4 += R3

AD01    // 101_011_01_00000001    LWD  %3, %1, +1                // 13 R3 <- W[i+1]
AD01    // 101_011_01_00000001    LWD  %3, %1, +1                // 13 R3 <- W[i+1]
4F1D    // 010_011_11_00011101    MULI %3, %3, 29                // 14 R3 *= 29
3300    // 001_100_11_00000000    ADD  %4, %3                    // 15 R4 += R3

AD02    // 101_011_01_00000010    LWD  %3, %1, +2                // 16 R3 <- W[i+2]
AD02    // 101_011_01_00000010    LWD  %3, %1, +2                // 16 R3 <- W[i+2]
4F11    // 010_011_11_00010001    MULI %3, %3, 17                // 17 R3 *= 17
3300    // 001_100_11_00000000    ADD  %4, %3                    // 18 R4 += R3


3000    // 001_100_00_00000000    ADD  %4, 0                     // 19 R4 +=0 
68FF    // 011_010_00_11111111    BNE  %2, %0, -1                // 20 wait for SW8 == 0
80E6    // 100_000_00_11100110    BEQ  %0, %0, +7               // jump to start 25+7 -> 0//  